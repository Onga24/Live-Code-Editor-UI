  //   return (
  //        <div className="min-h-screen bg-dark-gray text-gray-200 p-4 md:p-8 flex flex-col " style={{backgroundColor:'#101828'}}>
  //       {/* Header */}
  //       <div className="flex justify-between items-center mb-6 flex-wrap gap-4">
  //         <h1 className="text-3xl font-bold text-gray-50">
  //           <span className="text-sky-400">Project:</span> {project.title}
  //         </h1>
  //         <div className="flex items-center space-x-4">
  //           <span className={`text-sm px-3 py-1 rounded-full ${
  //             status.includes('Saved') || status.includes('loaded') ? 'bg-green-900 text-green-200' :
  //             status.includes('Created') ? 'bg-blue-900 text-blue-200' :
  //             status.includes('deleted') ? 'bg-red-900 text-red-200' :
  //             status.includes('Error') || status.includes('failed') ? 'bg-red-900 text-red-200' :
  //             'text-gray-400'
  //           }`}>
  //             {status || 'Ready'}
  //           </span>
  //           <button
  //             onClick={handleSave} 
  //             disabled={isSaving || !project.id}
  //             className={`px-6 py-2 rounded-lg font-semibold transition-all ${
  //               isSaving || !project.id
  //                 ? 'bg-gray-600 cursor-not-allowed' 
  //                 : 'bg-green-600 hover:bg-green-700 hover:shadow-lg transform hover:scale-105'
  //             }`}
  //           >
  //             + New File
  //           </button>
  //         </div>

  //       <div className="flex-1 flex flex-col lg:flex-row gap-6">
  //         {/* File Explorer */}
  //         <div className="lg:w-1/4 bg-gray-800 p-4 rounded-xl shadow-lg border border-gray-700">
  //           <div className="flex justify-between items-center mb-4">
  //             <h3 className="text-lg font-semibold text-gray-50">Files</h3>
  //             <div className="flex space-x-2">
  //               <button
  //                 onClick={() => setIsAddingFile(true)}
  //                 className="px-2 py-1 bg-sky-600 text-white rounded-lg text-sm hover:bg-sky-700 transition-all"
  //                 title="Create New File"
  //               >
  //                 + New
  //               </button>

  //               <label className="px-2 py-1 bg-green-600 text-white rounded-lg text-sm hover:bg-green-700 transition-all cursor-pointer">
  //                 <Upload className="h-4 w-4 inline mr-1" />
  //                 Upload
  //                 <input
  //                   type="file"
  //                   multiple
  //                   onChange={handleFileUpload}
  //                   className="hidden"
  //                   disabled={isUploading || !project.id}
  //                 />
  //               </label>

  //               {selectedFiles.length > 0 && (
  //                 <button
  //                   onClick={handleDeleteMultipleFiles}
  //                   className="px-2 py-1 bg-red-600 text-white rounded-lg text-sm hover:bg-red-700 transition-all"
  //                   title={`Delete ${selectedFiles.length} selected file(s)`}
  //                 >
  //                   <Trash2 className="h-4 w-4" />
  //                 </button>
  //               )}
  //             </div>
  //           </div>

  //           {/* File selection controls */}
  //           {project.files.length > 1 && (
  //             <div className="flex justify-between items-center mb-3 text-sm text-gray-400">
  //               <span>{selectedFiles.length} selected</span>
  //               <div className="space-x-2">
  //                 <button
  //                   onClick={() => setSelectedFiles(project.files.map(f => f.id))}
  //                   className="hover:text-sky-400"
  //                 >
  //                   Select All
  //                 </button>
  //                 <button
  //                   onClick={() => setSelectedFiles([])}
  //                   className="hover:text-sky-400"
  //                 >
  //                   Clear
  //                 </button>
  //               </div>
  //             </div>
  //           )}

  //           {/* Add File Form */}
  //           {isAddingFile && (
  //             <div className="flex flex-col space-y-3 mb-4 p-3 bg-gray-700 rounded-lg">
  //               <input
  //                 type="text"
  //                 placeholder="Enter file name"
  //                 value={newFileName}
  //                 onChange={(e) => setNewFileName(e.target.value)}
  //                 className="w-full p-2 bg-gray-600 text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-sky-500"
  //                 onKeyPress={(e) => e.key === 'Enter' && handleCreateFile()}
  //               />
  //               <select
  //                 value={newFileExtension}
  //                 onChange={(e) => setNewFileExtension(e.target.value)}
  //                 className="w-full p-2 bg-gray-600 text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-sky-500"
  //               >
  //                 <option value="html">.html</option>
  //                 <option value="css">.css</option>
  //                 <option value="js">.js</option>
  //                 <option value="ts">.ts</option>
  //                 <option value="jsx">.jsx</option>
  //                 <option value="py">.py</option>
  //                 <option value="php">.php</option>
  //                 <option value="java">.java</option>
  //                 <option value="cpp">.cpp</option>
  //                 <option value="md">.md</option>
  //                 <option value="json">.json</option>
  //                 <option value="txt">.txt</option>
  //               </select>
  //               <div className="flex space-x-2">
  //                 <button
  //                   onClick={handleCreateFile}
  //                   className="flex-1 p-2 bg-green-600 text-white rounded-lg font-semibold hover:bg-green-700 transition-all"
  //                 >
  //                   Create
  //                 </button>
  //                 <button
  //                   onClick={() => {
  //                     setIsAddingFile(false);
  //                     setNewFileName('');
  //                   }}
  //                   className="flex-1 p-2 bg-red-600 text-white rounded-lg font-semibold hover:bg-red-700 transition-all"
  //                 >
  //                   Cancel
  //                 </button>
  //               </div>
  //             </div>
  //           )}

  //            {/* File List */}
  //     <ul className="space-y-2">
  //       {project.files.map(file => (
  //         <li
  //           key={file.id}
  //           className={`flex items-center p-3 rounded-lg cursor-pointer transition-all ${
  //             file.id === activeFileId
  //               ? 'bg-sky-600 text-white shadow-lg'
  //               : selectedFiles.includes(file.id)
  //               ? 'bg-gray-700 ring-2 ring-sky-500'
  //               : 'hover:bg-gray-700'
  //           }`}
  //         >
  //           {/* File selection checkbox */}
  //           <div className="flex items-center mr-2">
  //             <input
  //               type="checkbox"
  //               checked={selectedFiles.includes(file.id)}
  //               onChange={(e) => {
  //                 if (e.target.checked) {
  //                   setSelectedFiles([...selectedFiles, file.id]);
  //                 } else {
  //                   setSelectedFiles(selectedFiles.filter(id => id !== file.id));
  //                 }
  //               }}
  //               className="rounded"
  //               onClick={(e) => e.stopPropagation()}
  //             />
  //           </div>

  //           <div
  //             className="flex items-center space-x-2 flex-1"
  //             onClick={() => handleFileSwitch(file.id)}
  //           >
  //             <FileTextIcon />
  //             <span className="truncate">{file.name}</span>
  //           </div>

  //           {project.files.length > 1 && (
  //             <button
  //               onClick={(e) => {
  //                 e.stopPropagation();
  //                 setShowDeleteConfirm(file.id);
  //                 // deleteFile(file.id);
  //                 handleDeleteFile(file.id);
  //               }}
  //               className="ml-2 text-red-400 hover:text-red-300 transition-colors"
  //               title="Delete file"
  //             >
  //               âœ•
  //             </button>
  //           )}
  //         </li>
  //       ))}
  //     </ul>
  //     {/* Remove the malformed tag here */}
  // </div>
  //         {/* Editor */}
  //         <div className="flex-1 flex flex-col gap-6">
  //           {/* Code Editor */}
  //           <div className="flex-1 flex flex-col min-h-0">
  //             <div className="flex justify-between items-center mb-3">
  //               <label className="text-lg font-semibold text-gray-50">
  //                 Code Editor: {activeFile?.name}
  //               </label>
  //               <div className="flex items-center space-x-2">
  //                 <span className="text-sm text-gray-400">
  //                   Language: {getLanguageFromExtension(activeFile?.name || '')}
  //                 </span>

  //                 {/* AI Toolbar */}
  //                 {/* <div className="flex space-x-1">
  //                   <button
  //                     onClick={handleAiCompletion}
  //                     disabled={isLoadingAi}
  //                     className="px-3 py-1 bg-purple-600 text-white rounded text-xs hover:bg-purple-700 disabled:opacity-50 transition-all"
  //                     title="AI Completion (Ctrl+Space)"
  //                   >
  //                     {isLoadingAi ? '...' : 'ðŸ¤– Complete'}
  //                   </button>
  //                   <button
  //                     onClick={handleAiImprove}
  //                     disabled={isLoadingAi}
  //                     className="px-3 py-1 bg-blue-600 text-white rounded text-xs hover:bg-blue-700 disabled:opacity-50 transition-all"
  //                     title="AI Improve (Ctrl+Shift+I)"
  //                   >
  //                     âœ¨ Improve
  //                   </button>
  //                 </div> */}
  //               </div>
  //             </div>

  //             {/* AI Suggestions Panel */}
  //             {showAiSuggestions && aiSuggestions.length > 0 && (
  //               <div className="bg-gray-800 border border-gray-700 rounded-lg p-4 mb-3 max-h-64 overflow-y-auto">
  //                 <div className="flex justify-between items-center mb-3">
  //                   <h4 className="text-sm font-semibold text-white">AI Suggestions</h4>
  //                   <button
  //                     onClick={() => setShowAiSuggestions(false)}
  //                     className="text-gray-400 hover:text-white"
  //                   >
  //                     <X className="h-4 w-4" />
  //                   </button>
  //                 </div>
  //                 <div className="space-y-3">
  //                   {aiSuggestions.map((suggestion, index) => (
  //                     <div key={index} className="bg-gray-700 p-3 rounded-lg">
  //                       <div className="flex justify-between items-start mb-2">
  //                         <span className="text-sm font-medium text-blue-400">
  //                           {suggestion.title || `Suggestion ${index + 1}`}
  //                         </span>
  //                         <button
  //                           onClick={() => applyAiSuggestion(suggestion)}
  //                           className="px-2 py-1 bg-green-600 text-white rounded text-xs hover:bg-green-700 transition-all"
  //                         >
  //                           Apply
  //                         </button>
  //                       </div>
  //                       {suggestion.description && (
  //                         <p className="text-xs text-gray-300 mb-2">{suggestion.description}</p>
  //                       )}
  //                       <pre className="bg-gray-800 p-2 rounded text-xs text-gray-200 overflow-x-auto">
  //                         <code>{suggestion.code}</code>
  //                       </pre>
  //                     </div>
  //                   ))}
  //                 </div>
  //               </div>
  //             )}

  //             <div className="flex-1 min-h-[400px] rounded-xl overflow-hidden border border-gray-700">
  //               <div ref={editorRef} className="w-full h-full" />
  //             </div>

  //             {/* Quick AI Actions Bar */}
  //             <div className="mt-2 flex justify-between items-center text-xs text-gray-500">
  //               <div className="flex space-x-4">

  //                 {selectedText && <span>Selection: {selectedText.length} chars</span>}
  //               </div>
  //               <div className="flex items-center space-x-2">
  //                 {isLoadingAi && <span>AI processing...</span>}
  //                 <span>Lines: {activeFile?.content.split('\n').length || 0}</span>
  //               </div>
  //             </div>
  //           </div>


  //         </div>

  //         {/* AI Chat Assistant */}
  //         <ChatAssistant />
  //       </div>
  //     </div>

  //     {/* Sidebar Chat */}
  //     {isChatOpen && (
  //       <div className="fixed right-0 top-0 h-full w-96 bg-white shadow-lg border-l z-50 flex flex-col">
  //         {/* Header */}
  //         <div className="flex justify-between items-center p-3 border-b bg-purple-600 text-white">
  //           <h2 className="font-semibold">Project Chat</h2>
  //           <button onClick={() => setIsChatOpen(false)}>
  //             <X size={20} />
  //           </button>
  //         </div>
  //         {/* Chat Component */}
  //         <Chat user={authUser} projectId={projectId} />
  //       </div>
  //     )}
  //   </div>
  // );






// import React, { useState, useEffect, useRef } from 'react';

// const FileTextIcon = () => (
//   <svg
//     xmlns="http://www.w3.org/2000/svg"
//     width="24"
//     height="24"
//     viewBox="0 0 24 24"
//     fill="none"
//     stroke="currentColor"
//     strokeWidth="2"
//     strokeLinecap="round"
//     strokeLinejoin="round"
//     className="h-5 w-5"
//   >
//     <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
//     <polyline points="14 2 14 8 20 8" />
//   </svg>
// );

// // Enhanced language detection with more file types
// const getLanguageFromExtension = (filename) => {
//   const extension = filename.split('.').pop()?.toLowerCase();
//   const languageMap = {
//     // Web Technologies
//     'html': 'html',
//     'htm': 'html',
//     'css': 'css',
//     'scss': 'scss',
//     'sass': 'sass',
//     'less': 'less',
//     'js': 'javascript',
//     'jsx': 'javascript',
//     'ts': 'typescript',
//     'tsx': 'typescript',
//     'json': 'json',
//     'xml': 'xml',

//     // Programming Languages
//     'py': 'python',
//     'php': 'php',
//     'java': 'java',
//     'c': 'c',
//     'cpp': 'cpp',
//     'cs': 'csharp',
//     'go': 'go',
//     'rs': 'rust',
//     'rb': 'ruby',
//     'swift': 'swift',
//     'kt': 'kotlin',
//     'scala': 'scala',

//     // Shell & Config
//     'sh': 'shell',
//     'bash': 'shell',
//     'yml': 'yaml',
//     'yaml': 'yaml',
//     'toml': 'toml',
//     'ini': 'ini',
//     'conf': 'ini',

//     // Markup & Documentation
//     'md': 'markdown',
//     'markdown': 'markdown',
//     'tex': 'latex',

//     // Database
//     'sql': 'sql',

//     // Other
//     'txt': 'plaintext',
//     'log': 'plaintext'
//   };

//   return languageMap[extension] || 'plaintext';
// };

// // Get default content based on file extension
// const getDefaultContent = (filename) => {
//   const extension = filename.split('.').pop()?.toLowerCase();

//   const templates = {
//     'html': '<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html>',
//     'css': '/* Add your styles here */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 20px;\n}',
//     'js': '// JavaScript code\nconsole.log("Hello World!");',
//     'py': '# Python code\nprint("Hello World!")',
//     'php': '<?php\n// PHP code\necho "Hello World!";\n?>',
//     'md': '# Markdown Document\n\nWrite your content here...',
//     'json': '{\n    "name": "example",\n    "version": "1.0.0"\n}'
//   };

//   return templates[extension] || '';
// };

// function CodeEditor() {
//   const initialProject = {
//     id: 'proj1',
//     title: 'Collaborative App',
//     files: [
//       { 
//         id: 'file1', 
//         name: 'index.html', 
//         content: '<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Hello World</title>\n    <style>\n        body { \n            font-family: Arial, sans-serif; \n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            min-height: 100vh;\n            margin: 0;\n        }\n        .container {\n            text-align: center;\n            background: rgba(255, 255, 255, 0.1);\n            padding: 2rem;\n            border-radius: 15px;\n            backdrop-filter: blur(10px);\n        }\n    </style>\n</head>\n<body>\n    <div class="container">\n        <h1>ðŸš€ Welcome to the Code Editor!</h1>\n        <p>This is a live HTML preview. Try editing the code!</p>\n        <button onclick="alert(\'Hello from JavaScript!\')" style="padding: 10px 20px; border: none; border-radius: 5px; background: #4CAF50; color: white; cursor: pointer;">Click Me!</button>\n    </div>\n</body>\n</html>' 
//       },
//     ]
//   };

//   const [project, setProject] = useState(initialProject);
//   const [activeFileId, setActiveFileId] = useState(initialProject.files[0].id);
//   const [status, setStatus] = useState('');
//   const [isSaving, setIsSaving] = useState(false);
//   const [isAddingFile, setIsAddingFile] = useState(false);
//   const [newFileName, setNewFileName] = useState('');
//   const [newFileExtension, setNewFileExtension] = useState('html');
//   const [monacoLoaded, setMonacoLoaded] = useState(false);
//   const [isDarkMode, setIsDarkMode] = useState(true); // Track dark mode

//   const activeFile = project.files.find(f => f.id === activeFileId);
//   const editorRef = useRef(null);
//   const monacoEditorRef = useRef(null);
//   const monacoInstanceRef = useRef(null);
//   const contentChangeTimeoutRef = useRef(null);

//   // Load Monaco Editor
//   useEffect(() => {
//     if (window.monaco) {
//       monacoInstanceRef.current = window.monaco;
//       setMonacoLoaded(true);
//       return;
//     }

//     const script = document.createElement('script');
//     script.src = "https://cdn.jsdelivr.net/npm/monaco-editor@0.49.0/min/vs/loader.js";
//     script.async = true;
//     script.onload = () => {
//       window.require.config({ 
//         paths: { 'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.49.0/min/vs' } 
//       });
//       window.require(['vs/editor/editor.main'], function(monaco) {
//         monacoInstanceRef.current = monaco;
//         setMonacoLoaded(true);
//       });
//     };
//     document.head.appendChild(script);

//     return () => {
//       if (script.parentNode) {
//         script.parentNode.removeChild(script);
//       }
//     };
//   }, []);

//   // Initialize Monaco Editor only once
//   useEffect(() => {
//     if (!monacoLoaded || !editorRef.current || !monacoInstanceRef.current || monacoEditorRef.current) {
//       return;
//     }
//  const toggleTheme = () => {
//     const newTheme = isDarkMode ? 'vs' : 'vs-dark';
//     setIsDarkMode(!isDarkMode);


//   };
//     // Create editor instance only once
//     const language = getLanguageFromExtension(activeFile.name);
//     monacoEditorRef.current = monacoInstanceRef.current.editor.create(editorRef.current, {
//       value: activeFile.content,
//       language: language,
//       theme:  'vs-dark',
//       automaticLayout: true,
//       minimap: { enabled: true },
//       fontSize: 14,
//       wordWrap: 'on',
//       lineNumbers: 'on',
//       scrollBeyondLastLine: false,
//       folding: true,
//       bracketMatching: 'always',
//       autoIndent: 'full',
//       formatOnPaste: true,
//       formatOnType: true,
//       selectOnLineNumbers: true,
//       roundedSelection: false,
//       readOnly: false,
//       cursorStyle: 'line',
//       mouseWheelZoom: true,
//       contextmenu: true,
//       smoothScrolling: true,
//     });

//     // Handle content changes with debouncing to prevent excessive re-renders
//     const disposable = monacoEditorRef.current.onDidChangeModelContent(() => {
//       // Clear any existing timeout
//       if (contentChangeTimeoutRef.current) {
//         clearTimeout(contentChangeTimeoutRef.current);
//       }

//       // Set new timeout for debounced update
//       contentChangeTimeoutRef.current = setTimeout(() => {
//         if (monacoEditorRef.current) {
//           const newCode = monacoEditorRef.current.getValue();
//           setProject(prevProject => {
//             const newFiles = prevProject.files.map(file =>
//               file.id === activeFileId ? { ...file, content: newCode } : file
//             );
//             return { ...prevProject, files: newFiles };
//           });
//         }
//       }, 100); // 100ms debounce
//     });

//     // Focus the editor after creation
//     setTimeout(() => {
//       if (monacoEditorRef.current) {
//         monacoEditorRef.current.focus();
//       }
//     }, 100);

//     return () => {
//       if (contentChangeTimeoutRef.current) {
//         clearTimeout(contentChangeTimeoutRef.current);
//       }
//       disposable.dispose();
//       if (monacoEditorRef.current) {
//         monacoEditorRef.current.dispose();
//         monacoEditorRef.current = null;
//       }
//     };
//   }, [monacoLoaded]);

//   // Update editor content and language when active file changes
//   useEffect(() => {
//     if (!monacoEditorRef.current || !activeFile) return;

//     const currentValue = monacoEditorRef.current.getValue();
//     const newLanguage = getLanguageFromExtension(activeFile.name);

//     // Only update if content actually changed
//     if (currentValue !== activeFile.content) {
//       // Save cursor position
//       const position = monacoEditorRef.current.getPosition();

//       // Update content without triggering change events temporarily
//       const model = monacoEditorRef.current.getModel();
//       if (model) {
//         model.setValue(activeFile.content);
//       }

//       // Restore cursor position if possible and content allows it
//       if (position && position.lineNumber <= model.getLineCount()) {
//         monacoEditorRef.current.setPosition(position);
//       }
//     }

//     // Update language
//     const model = monacoEditorRef.current.getModel();
//     if (model && monacoInstanceRef.current) {
//       monacoInstanceRef.current.editor.setModelLanguage(model, newLanguage);
//     }

//     // Ensure editor stays focused
//     setTimeout(() => {
//       if (monacoEditorRef.current) {
//         monacoEditorRef.current.focus();
//       }
//     }, 50);
//   }, [activeFileId, activeFile]);

//   // Update preview for HTML files
//   useEffect(() => {
//     if (activeFile && activeFile.name.endsWith('.html')) {
//       updatePreview();
//     } else {
//       clearPreview();
//     }
//   }, [activeFile?.content, activeFileId]);

//   const handleSave = async () => {
//     setIsSaving(true);
//     setStatus('Saving...');

//     // Simulate save operation
//     await new Promise(resolve => setTimeout(resolve, 1000));

//     console.log('Saving project:', project);
//     setStatus('Saved successfully!');
//     setIsSaving(false);
//     setTimeout(() => setStatus(''), 3000);

//     // Return focus to editor after saving
//     setTimeout(() => {
//       if (monacoEditorRef.current) {
//         monacoEditorRef.current.focus();
//       }
//     }, 100);
//   };

//   const handleCreateFile = () => {
//     if (!newFileName.trim()) return;

//     const fullFileName = `${newFileName.trim()}.${newFileExtension}`;
//     const newFile = {
//       id: `file${Date.now()}`, // Use timestamp for unique ID
//       name: fullFileName,
//       content: getDefaultContent(fullFileName),
//     };

//     setProject(prevProject => ({
//       ...prevProject,
//       files: [...prevProject.files, newFile],
//     }));

//     setActiveFileId(newFile.id);
//     setIsAddingFile(false);
//     setNewFileName('');
//     setStatus(`Created ${fullFileName}`);
//     setTimeout(() => setStatus(''), 2000);

//     // Focus editor after creating new file
//     setTimeout(() => {
//       if (monacoEditorRef.current) {
//         monacoEditorRef.current.focus();
//       }
//     }, 200);
//   };

//   const updatePreview = () => {
//     const iframe = document.getElementById('live-preview-iframe');
//     if (!iframe || !activeFile) return;

//     try {
//       const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
//       iframeDoc.open();
//       iframeDoc.write(activeFile.content);
//       iframeDoc.close();
//     } catch (error) {
//       console.error('Error updating preview:', error);
//     }
//   };

//   const clearPreview = () => {
//     const iframe = document.getElementById('live-preview-iframe');
//     if (iframe) {
//       try {
//         const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
//         iframeDoc.open();
//         iframeDoc.write(`
//           <div style="padding: 20px; font-family: Arial, sans-serif; color: #666; text-align: center; margin-top: 50px;">
//             <h3>ðŸ“„ Preview Available for HTML Files Only</h3>
//             <p>Switch to an HTML file to see the live preview.</p>
//           </div>
//         `);
//         iframeDoc.close();
//       } catch (error) {
//         console.error('Error clearing preview:', error);
//       }
//     }
//   };

//   const deleteFile = (fileId) => {
//     if (project.files.length <= 1) {
//       setStatus('Cannot delete the last file');
//       setTimeout(() => setStatus(''), 2000);
//       return;
//     }

//     setProject(prevProject => {
//       const newFiles = prevProject.files.filter(file => file.id !== fileId);
//       return { ...prevProject, files: newFiles };
//     });

//     // If we deleted the active file, switch to the first available file
//     if (fileId === activeFileId) {
//       const remainingFiles = project.files.filter(file => file.id !== fileId);
//       setActiveFileId(remainingFiles[0].id);
//     }

//     setStatus('File deleted');
//     setTimeout(() => setStatus(''), 2000);
//   };

//   return (
//     <div className="min-h-screen bg-gray-900 text-gray-200 p-4 md:p-8 flex flex-col">
//       {/* Header */}
//       <div className="flex justify-between items-center mb-6 flex-wrap gap-4">
//         <h1 className="text-3xl font-bold text-gray-50">
//           <span className="text-sky-400">Project:</span> {project.title}
//         </h1>
//         <div className="flex items-center space-x-4">
//           <span className={`text-sm px-3 py-1 rounded-full ${
//             status.includes('Saved') ? 'bg-green-900 text-green-200' :
//             status.includes('Created') ? 'bg-blue-900 text-blue-200' :
//             status.includes('deleted') ? 'bg-red-900 text-red-200' :
//             status.includes('Error') ? 'bg-red-900 text-red-200' :
//             'text-gray-400'
//           }`}>
//             {status}
//           </span>
//           <button
//             onClick={handleSave}
//             disabled={isSaving}
//             className={`px-6 py-2 rounded-lg font-semibold transition-all ${
//               isSaving 
//                 ? 'bg-gray-600 cursor-not-allowed' 
//                 : 'bg-green-600 hover:bg-green-700 hover:shadow-lg transform hover:scale-105'
//             }`}
//           >
//             {isSaving ? 'Saving...' : 'Save Project'}
//           </button>
//      {/*    */}
//           </div>
//       </div>

//       <div className="flex-1 flex flex-col lg:flex-row gap-6">
//         {/* File Explorer */}
//         <div className="lg:w-1/4 bg-gray-800 p-4 rounded-xl shadow-lg border border-gray-700">
//           <div className="flex justify-between items-center mb-4">
//             <h3 className="text-lg font-semibold text-gray-50">Files</h3>
//             <button
//               onClick={() => setIsAddingFile(true)}
//               className="px-3 py-1 bg-sky-600 text-white rounded-lg text-sm hover:bg-sky-700 transition-all transform hover:scale-105"
//             >
//               + New File
//             </button>
//           </div>

//           {/* Add File Form */}
//           {isAddingFile && (
//             <div className="flex flex-col space-y-3 mb-4 p-3 bg-gray-700 rounded-lg">
//               <input
//                 type="text"
//                 placeholder="Enter file name"
//                 value={newFileName}
//                 onChange={(e) => setNewFileName(e.target.value)}
//                 className="w-full p-2 bg-gray-600 text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-sky-500 transition-all"
//                 onKeyPress={(e) => e.key === 'Enter' && handleCreateFile()}
//               />
//               <select
//                 value={newFileExtension}
//                 onChange={(e) => setNewFileExtension(e.target.value)}
//                 className="w-full p-2 bg-gray-600 text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-sky-500 transition-all"
//               >
//                 <option value="html">.html</option>
//                 <option value="css">.css</option>
//                 <option value="js">.js</option>
//                 <option value="ts">.ts</option>
//                 <option value="jsx">.jsx</option>
//                 <option value="py">.py</option>
//                 <option value="php">.php</option>
//                 <option value="java">.java</option>
//                 <option value="cpp">.cpp</option>
//                 <option value="md">.md</option>
//                 <option value="json">.json</option>
//                 <option value="txt">.txt</option>
//               </select>
//               <div className="flex space-x-2">
//                 <button
//                   onClick={handleCreateFile}
//                   className="flex-1 p-2 bg-green-600 text-white rounded-lg font-semibold hover:bg-green-700 transition-all"
//                 >
//                   Create
//                 </button>
//                 <button
//                   onClick={() => {
//                     setIsAddingFile(false);
//                     setNewFileName('');
//                   }}
//                   className="flex-1 p-2 bg-red-600 text-white rounded-lg font-semibold hover:bg-red-700 transition-all"
//                 >
//                   Cancel
//                 </button>
//               </div>
//             </div>
//           )}

//           {/* File List */}
//           <ul className="space-y-2">
//             {project.files.map(file => (
//               <li
//                 key={file.id}
//                 className={`flex items-center justify-between p-3 rounded-lg cursor-pointer transition-all ${
//                   file.id === activeFileId 
//                     ? 'bg-sky-600 text-white shadow-lg' 
//                     : 'hover:bg-gray-700'
//                 }`}
//               >
//                 <div
//                   className="flex items-center space-x-2 flex-1"
//                   onClick={() => {
//                     setActiveFileId(file.id);
//                     // Focus editor after file selection
//                     setTimeout(() => {
//                       if (monacoEditorRef.current) {
//                         monacoEditorRef.current.focus();
//                       }
//                     }, 100);
//                   }}
//                 >
//                   <FileTextIcon />
//                   <span className="truncate">{file.name}</span>
//                   <span className="text-xs bg-gray-600 px-2 py-1 rounded">
//                     {getLanguageFromExtension(file.name)}
//                   </span>
//                 </div>
//                 {project.files.length > 1 && (
//                   <button
//                     onClick={(e) => {
//                       e.stopPropagation();
//                       deleteFile(file.id);
//                     }}
//                     className="ml-2 text-red-400 hover:text-red-300 transition-colors"
//                     title="Delete file"
//                   >
//                     âœ•
//                   </button>
//                 )}
//               </li>
//             ))}
//           </ul>
//         </div>

//         {/* Editor and Preview */}
//         <div className="flex-1 flex flex-col gap-6">
//           {/* Code Editor */}
//           <div className="flex-1 flex flex-col min-h-0">
//             <div className="flex justify-between items-center mb-3">
//               <label className="text-lg font-semibold text-gray-50">
//                 Code Editor: {activeFile?.name}
//               </label>
//               <span className="text-sm text-gray-400">
//                 Language: {getLanguageFromExtension(activeFile?.name || '')}
//               </span>
//             </div>
//             <div 
//               className="flex-1 min-h-[400px] rounded-xl overflow-hidden border border-gray-700"
//               onClick={() => {
//                 // Ensure editor gets focus when container is clicked
//                 if (monacoEditorRef.current) {
//                   monacoEditorRef.current.focus();
//                 }
//               }}
//             >
//               <div ref={editorRef} className="w-full h-full" />
//             </div>
//           </div>

//           {/* Live Preview
//           <div className="bg-gray-800 p-4 rounded-xl shadow-lg border border-gray-700">
//             <h3 className="text-lg font-semibold text-gray-50 mb-3">Live Preview</h3>
//             <div className="bg-white rounded-lg overflow-hidden" style={{ height: '300px' }}>
//               <iframe
//                 id="live-preview-iframe"
//                 className="w-full h-full border-none"
//                 title="Live Code Preview"
//                 sandbox="allow-scripts allow-same-origin"
//               />
//             </div>
//           </div> */}
//         </div>
//       </div>
//     </div>
//   );
// }
